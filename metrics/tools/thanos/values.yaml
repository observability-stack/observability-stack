existingObjstoreSecret: "thanos-objectstorage" # expecting a kubernetes secret with this name to connect existing s3 bucket for data storage.
# clusterDomain: observer-cluster.local # this is kubernetes.local by default. if you changed the domain name during the cluster deploy, set this field to match that.
query:
  enabled: true
  replicaLabel:
    - "prometheus_replica"
    - "rule_replica"
  dnsDiscovery:
    sidecarsService: "prometheus-operated"
    sidecarsNamespace: "cattle-monitoring-system"  # the namespace of the prometheus deployment. (this is cattle-monitoring-system for rancher-monitoring operator)
  nodeSelector: "kubernetes.io/os: linux"
  serviceAccount:
    create: true
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 90
queryFrontend:
  enabled: true
  nodeSelector: "kubernetes.io/os: linux"
  # podSecurityContext:
  #   enabled: false
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 90
compactor:
  enabled: true
  nodeSelector: "kubernetes.io/os: linux"
  # podSecurityContext:
  #   enabled: false
storegateway:
  enabled: true
  nodeSelector: "kubernetes.io/os: linux"
  # podSecurityContext:
  #   enabled: false
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 90
# receive:
#   enabled: true
#   autoscaling:
#     enabled: true
#     minReplicas: 1
#     maxReplicas: 10
#     targetCPU: 90
metrics:
  enabled: true # enable for thanos metrics monitoring.
  serviceMonitor:
    enabled: true # serviceMonitor for Prometheus
    namespace: "thanos-system" # for rancher-monitoring prometheus deployments, you can use cattle-monitoring-system namespace
minio:
  enabled: false
networkPolicy:
  enabled: false
